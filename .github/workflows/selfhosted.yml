#
# Copyright (C) 2024-2025 Antonino Scordino
# Copyright (C) 2024-2025 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#
name: Crave AOSP Builder - RisingOS Revived

on:
  repository_dispatch:
    types: [start-RisingOS-Revived-build]

permissions:
  actions: write
  contents: write
  statuses: write

run-name: "Crave Build for ${{ github.event.client_payload.brand }} ${{ github.event.client_payload.codename }} [${{ github.event.client_payload.type }} & ${{ github.event.client_payload.variant }}]"

jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    - name: Configure the 'crave' environment
      run: |
        echo "DCDEVSPACE status: ${DCDEVSPACE}"
        if [[ $DCDEVSPACE == *1* ]]; then
          echo 'No need to set up crave, we are already running in devspace!'
        else
          mkdir -p ${HOME}/bin/
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample
        fi
      env:
        CRAVE_USERNAME: ${{ secrets.CRAVE_USERNAME }}
        CRAVE_TOKEN: ${{ secrets.CRAVE_TOKEN }}

    - name: Run crave devspace
      run: |
        crave ${{ secrets.CRAVE_FLAGS }} devspace -- "echo \"Looking for runner...\"
          if [ -f actions-runner/run.sh ] ; then
            echo \"Runner found! Restarting it...\"
          else
            echo \"Error! Runner not found!\"
            exit 1
          fi

        if tmux has-session -t ghactions; then
          echo \"Runner is already Running\"
        else
          tmux kill-session -t ghactions || true; # Kill existing session if any, ignore errors if none
          tmux new-session -d -s ghactions
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter
          echo \"Runner Started\"
        fi"

  prepare:
    name: Prepare for Building
    runs-on: ubuntu-latest
    steps:
    - name: Check-out to repository
      uses: actions/checkout@v4

    - name: Check Credentials
      run: |
        if [[ -z "${{ secrets.CRAVE_TOKEN }}" || -z "${{ secrets.CRAVE_USERNAME }}" ]]; then
          echo "Crave Credentials Not Configured! Exiting..."
          exit 1
        fi
        bash scripts/env-checker.sh

    - name: Set Project variables
      id: proj-variables
      run: |
        export PROJECTFOLDER="/crave-devspaces/Rising15"
        export PROJECTID="86"
        export REPO_INIT="repo init -u https://github.com/RisingOS-Revived/android.git -b fifteen --git-lfs --depth=1"

        # Retrieve inputs from client_payload
        PRODUCT_NAME="${{ github.event.client_payload.codename }}"
        BUILD_TYPE="${{ github.event.client_payload.type }}"
        LUNCH="riseup ${PRODUCT_NAME} ${BUILD_TYPE}"

        echo "PROJECTID=$PROJECTID" >> "$GITHUB_OUTPUT"
        echo "REPO_INIT=$REPO_INIT" >> "$GITHUB_OUTPUT"
        echo "LUNCH=$LUNCH" >> "$GITHUB_OUTPUT"

  test:
    name: Test Local Manifests
    needs: prepare
    runs-on: ubuntu-latest
    steps:
    - name: Set Repo Project
      run: |
        PROJECTFOLDER="${{ needs.prepare.outputs.PROJECTFOLDER }}"
        PROJECTID="${{ needs.prepare.outputs.PROJECTID }}"
        REPO_INIT="${{ needs.prepare.outputs.REPO_INIT }}"
        LUNCH="${{ needs.prepare.outputs.LUNCH }}"

        echo "PROJECTFOLDER=$PROJECTFOLDER" >> "$GITHUB_ENV"
        echo "PROJECTID=$PROJECTID" >> "$GITHUB_ENV"
        echo "REPO_INIT=$REPO_INIT" >> "$GITHUB_ENV"
        echo "LUNCH=$LUNCH" >> "$GITHUB_ENV"

    - name: Configure the 'repo' environment
      run: |
        if ! command -v repo >/dev/null 2>&1; then
          echo "Repo not found. Installing now..."
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo >> ~/bin/repo
          chmod a+x ~/bin/repo
          sudo ln -sf "/home/$(whoami)/bin/repo" "/usr/bin/repo"
          echo "Repo installation complete."
        else
          echo "Repo already installed."
        fi
      continue-on-error: true

    - name: Set-up 'git' credential(s)
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

  build:
    timeout-minutes: 1440
    name: Build using foss.crave.io
    needs: test
    runs-on: self-hosted
    concurrency:
      group: ${{ github.repository_owner }}
    steps:
      # Accept Project Variables
    - name: Set Repo Project
      run: |
        PROJECTFOLDER="${{ needs.test.outputs.PROJECTFOLDER }}"
        PROJECTID="${{ needs.test.outputs.PROJECTID }}"
        REPO_INIT="${{ needs.test.outputs.REPO_INIT }}"
        LUNCH="${{ needs.test.outputs.LUNCH }}"

        echo "PROJECTFOLDER=$PROJECTFOLDER" >> "$GITHUB_ENV"
        echo "PROJECTID=$PROJECTID" >> "$GITHUB_ENV"
        echo "REPO_INIT=$REPO_INIT" >> "$GITHUB_ENV"
        echo "LUNCH=$LUNCH" >> "$GITHUB_ENV"

    - name: Checkout Code for Build Job
      uses: actions/checkout@v4


    - name: Telegram Notification (Build Queued)
      continue-on-error: true
      run: |
        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }
        send_telegram_message "Crave Project: RisingOS Revived%0ACrave ProjectID: $PROJECTID %0ABuild for ${{ github.event.client_payload.codename }} has been queued %0ACheck Progress at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}"
      env:
        chatId: ${{ secrets.TELEGRAM_CHAT_ID }}
        botToken: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        jobStatus: "Build Started"
        skipSuccess: false

    - name: Check for a broken .bashrc
      continue-on-error: true
      run: |
        (
          set +e
          output=$(source ~/.bashrc 2>&1)
          status=$?
          echo "$output"
          if [[ $status -ne 0 ]]; then
            echo "You have a broken .bashrc, please contact a Crave.io Administrator"
            exit 1
          else
            echo ".bashrc looks okay, no explicit errors"
          fi
          if echo "$output" | grep -q "cannot execute"; then
            echo "You have a broken .bashrc, please contact a Crave.io Administrator"
            exit 1
          fi
        )

    - name: Create Project Folders
      run: |
        echo "DCDEVSPACE status: ${DCDEVSPACE}"
        if [[ $DCDEVSPACE != *1* ]]; then
          echo "Symlinking devspace folder"
          mkdir -p devspace
          sudo mkdir -p /crave-devspaces
          sudo ln -sf ${pwd}/devspace /crave-devspaces
          sudo chmod 777 /crave-devspaces
        else
          echo "We are already running in devspace... Skipping Symlinks"
        fi

        if grep -q "$PROJECTFOLDER" <(crave clone list --json | jq -r '.clones[]."Cloned At"') || [[ "${DCDEVSPACE}" == "1" ]]; then
          crave clone destroy -y "$PROJECTFOLDER" || echo "Error removing $PROJECTFOLDER, it might not be a crave clone or already removed."
        else
          echo "Skipping removal: $PROJECTFOLDER is not a Crave clone outside devspace."
        fi

        if [[ $DCDEVSPACE == *1* ]]; then
          crave clone create --projectID $PROJECTID $PROJECTFOLDER || echo "Crave clone create failed!"
        else
          mkdir -p $PROJECTFOLDER
        fi

    - name: Set-up workspace environment
      run: |
        cd "$PROJECTFOLDER"
        mkdir "${{ github.event.client_payload.codename }}"
        cd "${{ github.event.client_payload.codename }}"
      continue-on-error: true

    - name: Set-up 'git' credential(s)
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

    - name: Configure the 'crave' environment (for the build, inside project folder)
      run: |
        echo "DCDEVSPACE status: ${DCDEVSPACE}"
        if [[ "$DCDEVSPACE" == *1* ]]; then
          echo 'No need to set up crave, we are already running in devspace!'
        else
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv "${PWD}/crave" "${HOME}/bin/"
          sudo ln -sf "${HOME}/bin/crave" "/usr/bin/crave"
          envsubst < "${PWD}/crave.conf.sample" >> "${PWD}/crave.conf"
          rm -rf "${PWD}/crave.conf.sample"
          cp crave.conf "$PROJECTFOLDER"
        fi
      env:
        CRAVE_USERNAME: ${{ secrets.CRAVE_USERNAME }}
        CRAVE_TOKEN: ${{ secrets.CRAVE_TOKEN }}

    - name: Set the 'crave' project (Repo Init)
      run: |
        cd "$PROJECTFOLDER"
        if grep -q "$PROJECTFOLDER" <(crave clone list --json | jq -r '.clones[]."Cloned At"') || [[ "${DCDEVSPACE}" == "1" ]]; then
          echo "Using Crave Clone... skipping repo init"
        else
          echo "Running $REPO_INIT"
          $REPO_INIT
        fi

    - name: Start compilation through 'crave'
      run: |
        cd "$PROJECTFOLDER"

        jq '.projects = []' ~/crave.conf > tmp && mv tmp ~/crave.conf
        export CLEAN="--clean"

        if [[ -n "${{ secrets.PAID }}" ]]; then
           echo "Paid Build... Tokens will be consumed."
           export PAID="--platform aosp-silver"
        fi

        echo "Build is queued! Please wait for your build to start."
        echo "Check foss.crave.io Dashboard to see builds"
        echo "Running build's log will show up here!"


        crave ${{ secrets.CRAVE_FLAGS }} run --no-patch ${PAID} ${CLEAN} -- "rm -rf .repo/local_manifests/ ${{ github.event.inputs.REMOVALS }} && \
        # Sync the repositories
        if [ -f /usr/bin/resync ]; then
          /usr/bin/resync # For compatibility with Omansh's Docker image
        else
          /opt/crave/resync.sh
        fi && \

        # Set up build environment
        export BUILD_USERNAME=${{ github.actor }} ; \
        export BUILD_HOSTNAME=crave ; \
        source build/envsetup.sh && \

        echo "Repository: ${{ github.repository }}"; \
        echo "Run ID: ${{ github.run_id }}"; \

        # Build the ROM
        $LUNCH && \
        make installclean && \
        rise b"
      timeout-minutes: 1440

    - name: Telegram Notification (Success)
      if: ${{ success() }}
      continue-on-error: true
      run: |
        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }
        send_telegram_message "Crave Project: RisingOS Revived%0ACrave ProjectID: $PROJECTID %0ABuild for ${{ github.event.client_payload.codename }} has Succeeded! %0ACheck Progress at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}%0ADownload at: https://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/releases/tag/${{ github.run_id }}"
      env:
        chatId: ${{ secrets.TELEGRAM_CHAT_ID }}
        botToken: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        jobStatus: ${{ job.status }}
        skipSuccess: false

    - name: Telegram Notification (Fail/Cancel)
      if: ${{ cancelled() || failure() }}
      continue-on-error: true
      run: |
        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }

        if [ "$jobStatus" = "cancelled" ]; then
          jobMessage="has been Cancelled!"
        elif [ "$jobStatus" = "failure" ]; then
          jobMessage="has Failed!"
        fi
        send_telegram_message "Crave Project: RisingOS Revived%0ACrave ProjectID: $PROJECTID %0ABuild for ${{ github.event.client_payload.codename }} $jobMessage %0ACheck Progress at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}"
      env:
        chatId: ${{ secrets.TELEGRAM_CHAT_ID }}
        botToken: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        jobStatus: ${{ job.status }}

    - name: Execute if the job is cancelled
      if: ${{ cancelled() }}
      run: |
        cd "$PROJECTFOLDER"
        crave stop --all

    - name: Upload build artifact(s)
      continue-on-error: true
      run: |
        cd "$PROJECTFOLDER"
        echo "${{ secrets.GITHUB_TOKEN }}" > token.txt
        crave push token.txt -d "$(crave ssh -- pwd | grep -v Select | sed -s 's/\r//g')/"
        crave ssh -- "export GH_UPLOAD_LIMIT="${{ secrets.GH_UPLOAD_LIMIT }}"; bash /opt/crave/github-actions/upload.sh '${{ github.run_id }}' '${{ github.event.client_payload.codename }}'  '${{ github.repository }}' '${{ github.event.client_payload.product_name }}-${{ github.run_id }}' 'boot.img dtbo.img vendor_boot.img recovery.img'"

    - name: Display error.log
      if: ${{ failure() }}
      id: errorlog
      run: |
        cd "$PROJECTFOLDER"
        crave ssh -- sleep 1
        crave pull out/error.log
        echo "Displaying out/error.log"
        cat out/error.log

    - name: Upload Using telegram-upload
      run: |
        cd "$PROJECTFOLDER"
        crave ssh -- "export TG_UPLOAD_LIMIT="${{ secrets.TG_UPLOAD_LIMIT }}"; bash /opt/crave/telegram/upload.sh '${{ github.event.client_payload.codename }}' 'boot.img dtbo.img vendor_boot.img recovery.img'"
      continue-on-error: true

    - name: Destroy Crave Clone
      if: ${{ always() }}
      run: |
        if grep -q "$PROJECTFOLDER" <(crave clone list --json | jq -r '.clones[]."Cloned At"') || [[ "${DCDEVSPACE}" == "1" ]]; then
          crave clone destroy -y "$PROJECTFOLDER" || echo "Error removing $PROJECTFOLDER, it might not be a crave clone or already removed."
        else
          echo "Skipping removal: $PROJECTFOLDER is not a Crave clone outside devspace."
        fi